<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="addEdgeS" xml:space="preserve">
    <value>Добавить ребро</value>
  </data>
  <data name="addNodeS" xml:space="preserve">
    <value>Добавить вершину</value>
  </data>
  <data name="deleteEdgeS" xml:space="preserve">
    <value>Удалить ребро</value>
  </data>
  <data name="deleteNodeS" xml:space="preserve">
    <value>Удалить вершину</value>
  </data>
  <data name="findShortPathS" xml:space="preserve">
    <value>Найти кратчайший путь</value>
  </data>
  <data name="loadFromDBS" xml:space="preserve">
    <value>Загрузить из БД</value>
  </data>
  <data name="loadFromFileS" xml:space="preserve">
    <value>Загрузить из файла</value>
  </data>
  <data name="notaddEdgeS" xml:space="preserve">
    <value>Кликните по двум вершинам, чтобы добавить ребро между ними</value>
  </data>
  <data name="notaddNodeS" xml:space="preserve">
    <value>Кликните по пустому месту, чтобы добавить вершину</value>
  </data>
  <data name="notdeleteEdgeS" xml:space="preserve">
    <value>Кликните на ребро, чтобы удалить его</value>
  </data>
  <data name="notdeleteNodeS" xml:space="preserve">
    <value>Кликните на вершину, чтобы удалить её</value>
  </data>
  <data name="notfindShortPathS" xml:space="preserve">
    <value>Кликните по двум вершинам, чтобы найти кратчайший путь между ними</value>
  </data>
  <data name="saveToDBS" xml:space="preserve">
    <value>Сохранить в БД</value>
  </data>
  <data name="saveToFileS" xml:space="preserve">
    <value>Сохранить в файл</value>
  </data>
  <data name="AboutS" xml:space="preserve">
    <value>Сведения</value>
  </data>
  <data name="AcceptS" xml:space="preserve">
    <value>Принять</value>
  </data>
  <data name="addBoxS" xml:space="preserve">
    <value>Добавить</value>
  </data>
  <data name="deleteBoxS" xml:space="preserve">
    <value>Удалить</value>
  </data>
  <data name="edgeColorS" xml:space="preserve">
    <value>Цвет ребра</value>
  </data>
  <data name="EnglishS" xml:space="preserve">
    <value>Английский</value>
  </data>
  <data name="ExitS" xml:space="preserve">
    <value>Выход</value>
  </data>
  <data name="FileS" xml:space="preserve">
    <value>Файл</value>
  </data>
  <data name="HelpS" xml:space="preserve">
    <value>Помощь</value>
  </data>
  <data name="LanguageS" xml:space="preserve">
    <value>Язык</value>
  </data>
  <data name="NewS" xml:space="preserve">
    <value>Новый</value>
  </data>
  <data name="nodeColorS" xml:space="preserve">
    <value>Цвет вершины</value>
  </data>
  <data name="OpenS" xml:space="preserve">
    <value>Открыть</value>
  </data>
  <data name="OptionsS" xml:space="preserve">
    <value>Настройки</value>
  </data>
  <data name="RussianS" xml:space="preserve">
    <value>Русский</value>
  </data>
  <data name="SaveS" xml:space="preserve">
    <value>Сохранить</value>
  </data>
  <data name="shortEdgeColorS" xml:space="preserve">
    <value>Цвет ребра в кратчайшем пути</value>
  </data>
  <data name="shortNodeColorS" xml:space="preserve">
    <value>Цвет вершины в кратчайшем пути</value>
  </data>
  <data name="ToolsS" xml:space="preserve">
    <value>Инструменты</value>
  </data>
  <data name="InfoFailLoadS" xml:space="preserve">
    <value>Граф не был загружен. Ошибка!</value>
  </data>
  <data name="InfoFailSaveS" xml:space="preserve">
    <value>Граф не был сохранен. Ошибка!</value>
  </data>
  <data name="InfoSuccessLoadS" xml:space="preserve">
    <value>Граф загружен!</value>
  </data>
  <data name="InfoSuccessSaveS" xml:space="preserve">
    <value>Граф сохранен!</value>
  </data>
  <data name="InfoLabelS" xml:space="preserve">
    <value>Информация:</value>
  </data>
  <data name="InfoTextDefaultS" xml:space="preserve">
    <value>У каждой кнопки есть подсказка!</value>
  </data>
  <data name="PathNotExistS" xml:space="preserve">
    <value>Путь не существует</value>
  </data>
  <data name="nodeSelectedColorS" xml:space="preserve">
    <value>Цвет выделенной вершины</value>
  </data>
</root>