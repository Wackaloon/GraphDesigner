<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="GraphDBDataSet" targetNamespace="http://tempuri.org/GraphDBDataSet.xsd" xmlns:mstns="http://tempuri.org/GraphDBDataSet.xsd" xmlns="http://tempuri.org/GraphDBDataSet.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="GraphDBConnectionString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="GraphDBConnectionString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.GraphDesigner.Properties.Settings.GlobalReference.Default.GraphDBConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="EdgesTableAdapter" GeneratorDataComponentClassName="EdgesTableAdapter" Name="Edges" UserDataComponentName="EdgesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="GraphDBConnectionString (Settings)" DbObjectName="dbo.Edges" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Edges] WHERE (([EdgeID] = @Original_EdgeID) AND ([EdgeParent] = @Original_EdgeParent) AND ([EdgeDestination] = @Original_EdgeDestination))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_EdgeID" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeID" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_EdgeParent" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeParent" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_EdgeDestination" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeDestination" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Edges] ([EdgeID], [EdgeParent], [EdgeDestination]) VALUES (@EdgeID, @EdgeParent, @EdgeDestination);
SELECT EdgeID, EdgeParent, EdgeDestination FROM Edges WHERE (EdgeID = @EdgeID)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@EdgeID" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeID" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@EdgeParent" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeParent" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@EdgeDestination" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeDestination" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT EdgeID, EdgeParent, EdgeDestination FROM dbo.Edges</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Edges] SET [EdgeID] = @EdgeID, [EdgeParent] = @EdgeParent, [EdgeDestination] = @EdgeDestination WHERE (([EdgeID] = @Original_EdgeID) AND ([EdgeParent] = @Original_EdgeParent) AND ([EdgeDestination] = @Original_EdgeDestination));
SELECT EdgeID, EdgeParent, EdgeDestination FROM Edges WHERE (EdgeID = @EdgeID)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@EdgeID" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeID" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@EdgeParent" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeParent" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@EdgeDestination" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeDestination" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_EdgeID" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeID" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_EdgeParent" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeParent" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_EdgeDestination" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="EdgeDestination" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="EdgeID" DataSetColumn="EdgeID" />
              <Mapping SourceColumn="EdgeParent" DataSetColumn="EdgeParent" />
              <Mapping SourceColumn="EdgeDestination" DataSetColumn="EdgeDestination" />
            </Mappings>
            <Sources />
          </TableAdapter>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="NodesTableAdapter" GeneratorDataComponentClassName="NodesTableAdapter" Name="Nodes" UserDataComponentName="NodesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="GraphDBConnectionString (Settings)" DbObjectName="dbo.Nodes" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[Nodes] WHERE (([NodeId] = @Original_NodeId) AND ([NodeX] = @Original_NodeX) AND ([NodeY] = @Original_NodeY))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_NodeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_NodeX" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeX" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_NodeY" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeY" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[Nodes] ([NodeId], [NodeX], [NodeY]) VALUES (@NodeId, @NodeX, @NodeY);
SELECT NodeId, NodeX, NodeY FROM Nodes WHERE (NodeId = @NodeId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@NodeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@NodeX" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeX" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@NodeY" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeY" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT NodeId, NodeX, NodeY FROM dbo.Nodes</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[Nodes] SET [NodeId] = @NodeId, [NodeX] = @NodeX, [NodeY] = @NodeY WHERE (([NodeId] = @Original_NodeId) AND ([NodeX] = @Original_NodeX) AND ([NodeY] = @Original_NodeY));
SELECT NodeId, NodeX, NodeY FROM Nodes WHERE (NodeId = @NodeId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@NodeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@NodeX" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeX" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@NodeY" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeY" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_NodeId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_NodeX" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeX" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_NodeY" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="NodeY" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="NodeId" DataSetColumn="NodeId" />
              <Mapping SourceColumn="NodeX" DataSetColumn="NodeX" />
              <Mapping SourceColumn="NodeY" DataSetColumn="NodeY" />
            </Mappings>
            <Sources />
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="GraphDBDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="True" msprop:Generator_DataSetName="GraphDBDataSet" msprop:Generator_UserDSName="GraphDBDataSet">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="Edges" msprop:Generator_TableClassName="EdgesDataTable" msprop:Generator_TableVarName="tableEdges" msprop:Generator_TablePropName="Edges" msprop:Generator_RowDeletingName="EdgesRowDeleting" msprop:Generator_RowChangingName="EdgesRowChanging" msprop:Generator_RowEvHandlerName="EdgesRowChangeEventHandler" msprop:Generator_RowDeletedName="EdgesRowDeleted" msprop:Generator_UserTableName="Edges" msprop:Generator_RowChangedName="EdgesRowChanged" msprop:Generator_RowEvArgName="EdgesRowChangeEvent" msprop:Generator_RowClassName="EdgesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="EdgeID" msprop:Generator_ColumnVarNameInTable="columnEdgeID" msprop:Generator_ColumnPropNameInRow="EdgeID" msprop:Generator_ColumnPropNameInTable="EdgeIDColumn" msprop:Generator_UserColumnName="EdgeID" type="xs:int" />
              <xs:element name="EdgeParent" msprop:Generator_ColumnVarNameInTable="columnEdgeParent" msprop:Generator_ColumnPropNameInRow="EdgeParent" msprop:Generator_ColumnPropNameInTable="EdgeParentColumn" msprop:Generator_UserColumnName="EdgeParent" type="xs:int" />
              <xs:element name="EdgeDestination" msprop:Generator_ColumnVarNameInTable="columnEdgeDestination" msprop:Generator_ColumnPropNameInRow="EdgeDestination" msprop:Generator_ColumnPropNameInTable="EdgeDestinationColumn" msprop:Generator_UserColumnName="EdgeDestination" type="xs:int" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Nodes" msprop:Generator_TableClassName="NodesDataTable" msprop:Generator_TableVarName="tableNodes" msprop:Generator_TablePropName="Nodes" msprop:Generator_RowDeletingName="NodesRowDeleting" msprop:Generator_RowChangingName="NodesRowChanging" msprop:Generator_RowEvHandlerName="NodesRowChangeEventHandler" msprop:Generator_RowDeletedName="NodesRowDeleted" msprop:Generator_UserTableName="Nodes" msprop:Generator_RowChangedName="NodesRowChanged" msprop:Generator_RowEvArgName="NodesRowChangeEvent" msprop:Generator_RowClassName="NodesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="NodeId" msprop:Generator_ColumnVarNameInTable="columnNodeId" msprop:Generator_ColumnPropNameInRow="NodeId" msprop:Generator_ColumnPropNameInTable="NodeIdColumn" msprop:Generator_UserColumnName="NodeId" type="xs:int" />
              <xs:element name="NodeX" msprop:Generator_ColumnVarNameInTable="columnNodeX" msprop:Generator_ColumnPropNameInRow="NodeX" msprop:Generator_ColumnPropNameInTable="NodeXColumn" msprop:Generator_UserColumnName="NodeX" type="xs:int" />
              <xs:element name="NodeY" msprop:Generator_ColumnVarNameInTable="columnNodeY" msprop:Generator_ColumnPropNameInRow="NodeY" msprop:Generator_ColumnPropNameInTable="NodeYColumn" msprop:Generator_UserColumnName="NodeY" type="xs:int" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Edges" />
      <xs:field xpath="mstns:EdgeID" />
    </xs:unique>
    <xs:unique name="Nodes_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:Nodes" />
      <xs:field xpath="mstns:NodeId" />
    </xs:unique>
  </xs:element>
</xs:schema>